'use strict';

var portfolio = angular.module('portfolio', ['ui.router']);

portfolio.run(function ($rootScope) {
	$rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
		console.error('Error Transitioning From' + fromState.name + "to" + toState.name + ":" + error);
	});
});

portfolio.config(function ($locationProvider) {
	$locationProvider.html5Mode(true);
});
portfolio.controller('formCtrl', function ($scope) {
	console.log('hitting form controller');
	$scope.submitForm = function () {
		console.log($scope.form);
	};
});
portfolio.controller('projCTRL', function ($scope, projects) {
	projects.getRepos().then(function (arr) {
		$scope.repos = arr;
		console.log($scope.repos);
	});
});
portfolio.directive('timeline', function () {
	return {
		restrict: 'E',
		templateUrl: 'js/directives/timeline.html',
		link: function link(scope, element, attrs) {
			function Timeline(cvs) {
				var self = this,
				    paused = true,
				    rafid = 0,
				    mouse = { x: 0, y: 0 },
				    canvas = cvs,
				    ctx = null;

				self.lines = [];

				self.isOK = false;
				self.options = {
					speed: 0.1,
					density: 8,
					radius: 600
				};
				self.targets = [[20, 31, 55], [18, 19, 27]];
				self.dotColors = [['#13669b', 'rgba(19, 102, 155, 0.3)', 'rgba(19, 102, 155, 0.08)'], ['#7dd317', 'rgba(113, 222, 15, 0.3)', 'rgba(91, 164, 22, 0.12)']];

				self.isPaused = function () {
					return paused;
				};

				function InitDots() {
					var tl = $('.timeline');
					var top = tl.find('h2').outerHeight();

					self.lines[0].dots = [];
					var y = top;
					tl.find('article:first figure').each(function () {

						self.lines[0].dots.push([$(this).outerWidth() + 20, y + 20]);

						y += $(this).outerHeight();
					});

					self.lines[1].dots = [];
					var y = top;
					tl.find('article:last figure').each(function () {

						self.lines[1].dots.push([canvas.width - $(this).outerWidth() - 20, y + 20]);

						y += $(this).outerHeight();
					});
				}

				function OnResize() {
					canvas.width = canvas.offsetWidth;
					canvas.height = canvas.offsetHeight;

					var wasPaused = paused;
					self.toggle(false);
					// Init lines
					self.lines[0].reset(canvas.offsetWidth / 2 - 15);
					self.lines[1].reset(canvas.offsetWidth / 2 + 15);

					InitDots();

					self.toggle(!wasPaused);
				}

				function init() {
					var result = false;
					try {
						result = !!(canvas.getContext && (ctx = canvas.getContext('2d')));

						self.lines[0] = new Line(0, canvas.offsetHeight - 100, '#4789a3', self.options, mouse);
						self.lines[1] = new Line(0, canvas.offsetHeight - 100, '#a0d59c', self.options, mouse);
					} catch (e) {
						return false;
					}

					$(canvas).mousemove(function (e) {

						if (e.offsetX) {
							mouse.x = e.offsetX;
							mouse.y = e.offsetY;
						} else if (e.layerX) {
							mouse.x = e.layerX;
							mouse.y = e.layerY;
						} else {
							mouse.x = e.pageX - $(canvas).offset().left;
							mouse.y = e.pageY - $(canvas).offset().top;
						}
					});

					$(window).resize(OnResize);

					OnResize();

					return result;
				}

				function Line(y, height, color, options, mouse) {
					var self = this;

					self.color = color;
					self.options = options;
					self.mouse = mouse;
					self.height = height;
					self.dots = [];
					self.y = y;

					self.points = [];

					self.reset = function (x, f) {
						self.points = [];
						for (var y = self.y; y < self.height; y += self.options.density) {
							self.points.push(new Point(x, y, self.color));
						}
					};

					self.update = function () {
						for (var i = 0; i < self.points.length; i++) {
							self.points[i].update(self.mouse, self.options);
						}
					};

					function Point(x, y) {
						this.y = y;
						this.x = x;
						this.base = { x: x, y: y };

						this.update = function (mouse, options) {
							var dx = this.x - mouse.x,
							    dy = this.y - mouse.y,
							    alpha = Math.atan2(dx, dy),
							    alpha = alpha > 0 ? alpha : 2 * Math.PI + alpha,
							    d = options.radius / Math.sqrt(dx * dx + dy * dy);

							this.y += Math.cos(alpha) * d + (this.base.y - this.y) * options.speed;
							this.x += Math.sin(alpha) * d + (this.base.x - this.x) * options.speed;
						};
					}
				}

				function drawCircle(p, r, color) {
					ctx.fillStyle = color;
					ctx.beginPath();
					ctx.arc(p.x, p.y, r, 0, 2 * Math.PI, true);
					ctx.closePath();
					ctx.fill();
				}

				function drawLine(p1, p2) {
					ctx.beginPath();
					ctx.moveTo(p1.x, p1.y);
					ctx.lineTo(p2.x, p2.y);
					ctx.stroke();
					ctx.closePath();
				}

				function redraw() {
					ctx.clearRect(0, 0, canvas.width, canvas.height);

					for (var i = 0; i < 2; i++) {
						var points = self.lines[i].points;

						ctx.beginPath();
						ctx.lineWidth = 2;
						ctx.strokeStyle = self.lines[i].color;
						ctx.moveTo(points[15].x, points[15].y);

						for (var j = 15; j < points.length - 2; j++) {
							var point = points[j];

							var xc = (points[j + 1].x + point.x) / 2;
							var yc = (points[j + 1].y + point.y) / 2;

							ctx.quadraticCurveTo(point.x, point.y, xc, yc);
						}
						ctx.stroke();
						ctx.closePath();

						// Dots
						ctx.lineWidth = 1.2;
						ctx.strokeStyle = self.dotColors[i][2];
						for (var j = 0; j < self.lines[i].dots.length; j++) {
							var dot = self.lines[i].dots[j],
							    id = self.targets[i][j],
							    dot2 = [(self.lines[i].points[id].x + self.lines[i].points[id + 1].x) / 2, (self.lines[i].points[id].y + self.lines[i].points[id + 1].y) / 2];

							var p1 = { x: dot[0], y: dot[1] };
							var p2 = { x: dot2[0], y: dot2[1] };

							drawLine(p1, p2);
							drawCircle(p1, 3, self.dotColors[i][0]);

							drawCircle(p2, 11, self.dotColors[i][1]);
							drawCircle(p2, 5.5, self.dotColors[i][0]);
						}
					}
				}

				function animate() {
					rafid = requestAnimationFrame(animate);

					self.lines[0].update();
					self.lines[1].update();

					redraw();
				}

				self.toggle = function (run) {
					if (!self.isOK) return false;

					if (run === undefined) self.toggle(!paused);else if (!!run && paused) {
						paused = false;
						animate();
					} else if (!!!run) {
						paused = true;
						cancelAnimationFrame(rafid);
					}
					return true;
				};

				self.isOK = init();
			}
			new Timeline($('#cvs3').get(0)).toggle(true);
		}
	};
});

portfolio.factory('projects', function ($http) {
	var factoryObj = {};
	factoryObj.getRepos = function () {
		return $http.get('https://api.github.com/user/repos', {
			username: 'mosane',
			password: 'xxxxxxxxx'
		}).then(function (arr) {
			return arr.data;
		});
	};
	return factoryObj;
});
'use strict';

portfolio.config(function ($stateProvider) {
	$stateProvider.state('projects', {
		url: '/projects',
		templateUrl: 'templates/portfolio.html',
		controller: 'projCTRL'
	});
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbnRyb2xsZXJzL2Zvcm1DdHJsLmpzIiwiY29udHJvbGxlcnMvcHJvamVjdEN0cmwuanMiLCJkaXJlY3RpdmVzL3RpbWVsaW5lLmpzIiwiZmFjdG9yaWVzL3BvcnRmb2xpby5qcyIsInN0YXRlcy9wb3J0Zm9saW8uanMiXSwibmFtZXMiOlsicG9ydGZvbGlvIiwiYW5ndWxhciIsIm1vZHVsZSIsInJ1biIsIiRyb290U2NvcGUiLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImNvbnNvbGUiLCJuYW1lIiwiY29uZmlnIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwibG9nIiwic3VibWl0Rm9ybSIsImZvcm0iLCJwcm9qZWN0cyIsImdldFJlcG9zIiwidGhlbiIsImFyciIsInJlcG9zIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsIlRpbWVsaW5lIiwiY3ZzIiwic2VsZiIsInBhdXNlZCIsInJhZmlkIiwibW91c2UiLCJ4IiwieSIsImNhbnZhcyIsImN0eCIsImxpbmVzIiwiaXNPSyIsIm9wdGlvbnMiLCJzcGVlZCIsImRlbnNpdHkiLCJyYWRpdXMiLCJ0YXJnZXRzIiwiZG90Q29sb3JzIiwiaXNQYXVzZWQiLCJJbml0RG90cyIsInRsIiwiJCIsInRvcCIsImZpbmQiLCJvdXRlckhlaWdodCIsImRvdHMiLCJlYWNoIiwicHVzaCIsIm91dGVyV2lkdGgiLCJ3aWR0aCIsIk9uUmVzaXplIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ3YXNQYXVzZWQiLCJ0b2dnbGUiLCJyZXNldCIsImluaXQiLCJyZXN1bHQiLCJnZXRDb250ZXh0IiwiTGluZSIsImUiLCJtb3VzZW1vdmUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImxheWVyWCIsImxheWVyWSIsInBhZ2VYIiwib2Zmc2V0IiwibGVmdCIsInBhZ2VZIiwid2luZG93IiwicmVzaXplIiwiY29sb3IiLCJwb2ludHMiLCJmIiwiUG9pbnQiLCJ1cGRhdGUiLCJpIiwibGVuZ3RoIiwiYmFzZSIsImR4IiwiZHkiLCJhbHBoYSIsIk1hdGgiLCJhdGFuMiIsIlBJIiwiZCIsInNxcnQiLCJjb3MiLCJzaW4iLCJkcmF3Q2lyY2xlIiwicCIsInIiLCJmaWxsU3R5bGUiLCJiZWdpblBhdGgiLCJhcmMiLCJjbG9zZVBhdGgiLCJmaWxsIiwiZHJhd0xpbmUiLCJwMSIsInAyIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwicmVkcmF3IiwiY2xlYXJSZWN0IiwibGluZVdpZHRoIiwic3Ryb2tlU3R5bGUiLCJqIiwicG9pbnQiLCJ4YyIsInljIiwicXVhZHJhdGljQ3VydmVUbyIsImRvdCIsImlkIiwiZG90MiIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1bmRlZmluZWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdldCIsImZhY3RvcnkiLCIkaHR0cCIsImZhY3RvcnlPYmoiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZGF0YSIsIiRzdGF0ZVByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUFBLFlBQUFDLFFBQUFDLE1BQUEsQ0FBQSxXQUFBLEVBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQTs7QUFFQUYsVUFBQUcsR0FBQSxDQUFBLFVBQUFDLFVBQUEsRUFBQTtBQUNBQSxZQUFBQyxHQUFBLENBQUEsbUJBQUEsRUFBQSxVQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUFBQyxTQUFBLEVBQUFDLFVBQUEsRUFBQUMsS0FBQSxFQUFBO0FBQ0FDLFVBQUFELEtBQUEsQ0FBQSw2QkFBQUYsVUFBQUksSUFBQSxHQUFBLElBQUEsR0FBQU4sUUFBQU0sSUFBQSxHQUFBLEdBQUEsR0FBQUYsS0FBQTtBQUNBLEVB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QUEsV0FEQTtBQUVBbkgsZUFBQSwwQkFGQTtBQUdBWixjQUFBO0FBSEEsRUFBQTtBQU1BLENBUEEiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcG9ydGZvbGlvID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRmb2xpbycsIFsndWkucm91dGVyJ10pXG5cbnBvcnRmb2xpby5ydW4oZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcblx0JHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIFRyYW5zaXRpb25pbmcgRnJvbScgKyBmcm9tU3RhdGUubmFtZSArIFwidG9cIiArIHRvU3RhdGUubmFtZSArIFwiOlwiICsgZXJyb3IpO1xuXHR9KVxufSk7XG5cbnBvcnRmb2xpby5jb25maWcoZnVuY3Rpb24gKCRsb2NhdGlvblByb3ZpZGVyKXtcblx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xufSkiLCJwb3J0Zm9saW8uY29udHJvbGxlcignZm9ybUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG5cdGNvbnNvbGUubG9nKCdoaXR0aW5nIGZvcm0gY29udHJvbGxlcicpXG5cdCRzY29wZS5zdWJtaXRGb3JtID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKCRzY29wZS5mb3JtKVxuXHR9XG59KSIsInBvcnRmb2xpby5jb250cm9sbGVyKCdwcm9qQ1RSTCcsIGZ1bmN0aW9uICgkc2NvcGUsIHByb2plY3RzKSB7XG5cdHByb2plY3RzLmdldFJlcG9zKClcblx0LnRoZW4oZnVuY3Rpb24gKGFycil7XG5cdFx0JHNjb3BlLnJlcG9zID0gYXJyO1xuXHRcdGNvbnNvbGUubG9nKCRzY29wZS5yZXBvcylcblx0fSlcbn0pIiwicG9ydGZvbGlvLmRpcmVjdGl2ZSgndGltZWxpbmUnLCBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB7XG5cdFx0cmVzdHJpY3Q6ICdFJyxcblx0XHR0ZW1wbGF0ZVVybDogJ2pzL2RpcmVjdGl2ZXMvdGltZWxpbmUuaHRtbCcsXG5cdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuXHRcdFx0ZnVuY3Rpb24gVGltZWxpbmUoY3ZzKSB7XG5cdFx0XHQgICAgdmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0ICAgICAgICBwYXVzZWQgPSB0cnVlLFxuXHRcdFx0ICAgICAgICByYWZpZCA9IDAsXG5cdFx0XHQgICAgICAgIG1vdXNlID0geyB4OiAwLCB5OiAwIH0sXG5cdFx0XHQgICAgICAgIGNhbnZhcyA9IGN2cyxcblx0XHRcdCAgICAgICAgY3R4ID0gbnVsbDtcblxuXHRcdFx0ICAgIHNlbGYubGluZXMgPSBbXTtcblxuXHRcdFx0ICAgIHNlbGYuaXNPSyA9IGZhbHNlO1xuXHRcdFx0ICAgIHNlbGYub3B0aW9ucyA9IHtcblx0XHRcdCAgICAgICAgc3BlZWQ6IDAuMSxcblx0XHRcdCAgICAgICAgZGVuc2l0eTogOCxcblx0XHRcdCAgICAgICAgcmFkaXVzOiA2MDAsXG5cdFx0XHQgICAgfTtcblx0XHRcdCAgICBzZWxmLnRhcmdldHMgPSBbXG5cdFx0XHQgICAgICAgIFsyMCAsMzEsIDU1XSxcblx0XHRcdCAgICAgICAgWzE4LDE5LDI3XVxuXHRcdFx0ICAgIF07XG5cdFx0XHQgICAgc2VsZi5kb3RDb2xvcnMgPSBbXG5cdFx0XHQgICAgICAgIFsnIzEzNjY5YicsICdyZ2JhKDE5LCAxMDIsIDE1NSwgMC4zKScsICdyZ2JhKDE5LCAxMDIsIDE1NSwgMC4wOCknXSxcblx0XHRcdCAgICAgICAgWycjN2RkMzE3JywgJ3JnYmEoMTEzLCAyMjIsIDE1LCAwLjMpJywgJ3JnYmEoOTEsIDE2NCwgMjIsIDAuMTIpJ10sXG5cdFx0XHQgICAgXTtcblxuXHRcdFx0ICAgIHNlbGYuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHQgICAgICAgIHJldHVybiBwYXVzZWQ7XG5cdFx0XHQgICAgfTtcblxuXHRcdFx0ICAgIGZ1bmN0aW9uIEluaXREb3RzKCkge1xuXHRcdFx0ICAgICAgICB2YXIgdGwgPSAkKCcudGltZWxpbmUnKTtcblx0XHRcdCAgICAgICAgdmFyIHRvcCA9IHRsLmZpbmQoJ2gyJykub3V0ZXJIZWlnaHQoKTtcblxuXHRcdFx0ICAgICAgICBzZWxmLmxpbmVzWzBdLmRvdHMgPSBbXTtcblx0XHRcdCAgICAgICAgdmFyIHkgPSB0b3A7XG5cdFx0XHQgICAgICAgIHRsLmZpbmQoJ2FydGljbGU6Zmlyc3QgZmlndXJlJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cblx0XHRcdCAgICAgICAgICAgIHNlbGYubGluZXNbMF0uZG90cy5wdXNoKFskKHRoaXMpLm91dGVyV2lkdGgoKSArIDIwLCB5ICsgMjBdKTtcblxuXHRcdFx0ICAgICAgICAgICAgeSArPSAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG5cdFx0XHQgICAgICAgIH0pO1xuXG5cdFx0XHQgICAgICAgIHNlbGYubGluZXNbMV0uZG90cyA9IFtdO1xuXHRcdFx0ICAgICAgICB2YXIgeSA9IHRvcDtcblx0XHRcdCAgICAgICAgdGwuZmluZCgnYXJ0aWNsZTpsYXN0IGZpZ3VyZScpLmVhY2goZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQgICAgICAgICAgICBzZWxmLmxpbmVzWzFdLmRvdHMucHVzaChbY2FudmFzLndpZHRoIC0gJCh0aGlzKS5vdXRlcldpZHRoKCkgLSAyMCwgeSArIDIwXSk7XG5cblx0XHRcdCAgICAgICAgICAgIHkgKz0gJCh0aGlzKS5vdXRlckhlaWdodCgpO1xuXHRcdFx0ICAgICAgICB9KTtcblx0XHRcdCAgICB9XG5cblx0XHRcdCAgICBmdW5jdGlvbiBPblJlc2l6ZSgpIHtcblx0XHRcdCAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLm9mZnNldFdpZHRoO1xuXHRcdFx0ICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLm9mZnNldEhlaWdodDtcblxuXHRcdFx0ICAgICAgICB2YXIgd2FzUGF1c2VkID0gcGF1c2VkO1xuXHRcdFx0ICAgICAgICBzZWxmLnRvZ2dsZShmYWxzZSk7XG5cdFx0XHQgICAgICAgIC8vIEluaXQgbGluZXNcblx0XHRcdCAgICAgICAgc2VsZi5saW5lc1swXS5yZXNldChjYW52YXMub2Zmc2V0V2lkdGggLyAyIC0gMTUpO1xuXHRcdFx0ICAgICAgICBzZWxmLmxpbmVzWzFdLnJlc2V0KGNhbnZhcy5vZmZzZXRXaWR0aCAvIDIgKyAxNSk7XG5cblx0XHRcdCAgICAgICAgSW5pdERvdHMoKTtcblxuXHRcdFx0ICAgICAgICBzZWxmLnRvZ2dsZSghd2FzUGF1c2VkKTtcblx0XHRcdCAgICB9XG5cblx0XHRcdCAgICBmdW5jdGlvbiBpbml0KCkge1xuXHRcdFx0ICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG5cdFx0XHQgICAgICAgIHRyeSB7XG5cdFx0XHQgICAgICAgICAgICByZXN1bHQgPSAhIShjYW52YXMuZ2V0Q29udGV4dCAmJiAoY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykpKTtcblxuXHRcdFx0ICAgICAgICAgICAgc2VsZi5saW5lc1swXSA9IG5ldyBMaW5lKDAsIGNhbnZhcy5vZmZzZXRIZWlnaHQgLSAxMDAsICcjNDc4OWEzJywgc2VsZi5vcHRpb25zLCBtb3VzZSk7XG5cdFx0XHQgICAgICAgICAgICBzZWxmLmxpbmVzWzFdID0gbmV3IExpbmUoMCwgY2FudmFzLm9mZnNldEhlaWdodCAtIDEwMCwgJyNhMGQ1OWMnLCBzZWxmLm9wdGlvbnMsIG1vdXNlKTtcblxuXHRcdFx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdFx0XHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0XHQgICAgICAgIH1cblxuXHRcdFx0ICAgICAgICAkKGNhbnZhcykubW91c2Vtb3ZlKGZ1bmN0aW9uIChlKSB7XG5cblx0XHRcdCAgICAgICAgICAgIGlmIChlLm9mZnNldFgpIHtcblx0XHRcdCAgICAgICAgICAgICAgICBtb3VzZS54ID0gZS5vZmZzZXRYO1xuXHRcdFx0ICAgICAgICAgICAgICAgIG1vdXNlLnkgPSBlLm9mZnNldFk7XG5cdFx0XHQgICAgICAgICAgICB9XG5cdFx0XHQgICAgICAgICAgICBlbHNlIGlmIChlLmxheWVyWCkge1xuXHRcdFx0ICAgICAgICAgICAgICAgIG1vdXNlLnggPSBlLmxheWVyWDtcblx0XHRcdCAgICAgICAgICAgICAgICBtb3VzZS55ID0gZS5sYXllclk7XG5cdFx0XHQgICAgICAgICAgICB9XG5cdFx0XHQgICAgICAgICAgICBlbHNlIHtcblx0XHRcdCAgICAgICAgICAgICAgICBtb3VzZS54ID0gZS5wYWdlWCAtICQoY2FudmFzKS5vZmZzZXQoKS5sZWZ0O1xuXHRcdFx0ICAgICAgICAgICAgICAgIG1vdXNlLnkgPSBlLnBhZ2VZIC0gJChjYW52YXMpLm9mZnNldCgpLnRvcDtcblx0XHRcdCAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgfSk7XG5cblx0XHRcdCAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShPblJlc2l6ZSk7XG5cblx0XHRcdCAgICAgICAgT25SZXNpemUoKTtcblxuXHRcdFx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHRcdFx0ICAgIH1cblxuXHRcdFx0ICAgIGZ1bmN0aW9uIExpbmUoeSwgaGVpZ2h0LCBjb2xvciwgb3B0aW9ucywgbW91c2UpIHtcblx0XHRcdCAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQgICAgICAgIHNlbGYuY29sb3IgPSBjb2xvcjtcblx0XHRcdCAgICAgICAgc2VsZi5vcHRpb25zID0gb3B0aW9ucztcblx0XHRcdCAgICAgICAgc2VsZi5tb3VzZSA9IG1vdXNlO1xuXHRcdFx0ICAgICAgICBzZWxmLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdCAgICAgICAgc2VsZi5kb3RzID0gW107XG5cdFx0XHQgICAgICAgIHNlbGYueSA9IHk7XG5cblx0XHRcdCAgICAgICAgc2VsZi5wb2ludHMgPSBbXTtcblxuXHRcdFx0ICAgICAgICBzZWxmLnJlc2V0ID0gZnVuY3Rpb24gKHgsIGYpIHtcblx0XHRcdCAgICAgICAgICAgIHNlbGYucG9pbnRzID0gW107XG5cdFx0XHQgICAgICAgICAgICBmb3IgKHZhciB5ID0gc2VsZi55OyB5IDwgc2VsZi5oZWlnaHQ7IHkgKz0gc2VsZi5vcHRpb25zLmRlbnNpdHkpXG5cdFx0XHQgICAgICAgICAgICAgICAgc2VsZi5wb2ludHMucHVzaChuZXcgUG9pbnQoeCwgeSwgc2VsZi5jb2xvcikpO1xuXHRcdFx0ICAgICAgICB9XG5cblx0XHRcdCAgICAgICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYucG9pbnRzLmxlbmd0aDsgaSsrKVxuXHRcdFx0ICAgICAgICAgICAgICAgIHNlbGYucG9pbnRzW2ldLnVwZGF0ZShzZWxmLm1vdXNlLCBzZWxmLm9wdGlvbnMpO1xuXHRcdFx0ICAgICAgICB9XG5cblx0XHRcdCAgICAgICAgZnVuY3Rpb24gUG9pbnQoeCwgeSkge1xuXHRcdFx0ICAgICAgICAgICAgdGhpcy55ID0geTtcblx0XHRcdCAgICAgICAgICAgIHRoaXMueCA9IHg7XG5cdFx0XHQgICAgICAgICAgICB0aGlzLmJhc2UgPSB7IHg6IHgsIHk6IHkgfTtcblxuXHRcdFx0ICAgICAgICAgICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAobW91c2UsIG9wdGlvbnMpIHtcblx0XHRcdCAgICAgICAgICAgICAgICB2YXIgZHggPSB0aGlzLnggLSBtb3VzZS54LFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBkeSA9IHRoaXMueSAtIG1vdXNlLnksXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIGFscGhhID0gTWF0aC5hdGFuMihkeCwgZHkpLFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IChhbHBoYSA+IDAgPyBhbHBoYSA6IDIgKiBNYXRoLlBJICsgYWxwaGEpLFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBkID0gb3B0aW9ucy5yYWRpdXMgLyBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG5cdFx0XHQgICAgICAgICAgICAgICAgdGhpcy55ICs9IE1hdGguY29zKGFscGhhKSAqIGQgKyAodGhpcy5iYXNlLnkgLSB0aGlzLnkpICogb3B0aW9ucy5zcGVlZDtcblx0XHRcdCAgICAgICAgICAgICAgICB0aGlzLnggKz0gTWF0aC5zaW4oYWxwaGEpICogZCArICh0aGlzLmJhc2UueCAtIHRoaXMueCkgKiBvcHRpb25zLnNwZWVkO1xuXHRcdFx0ICAgICAgICAgICAgfVxuXHRcdFx0ICAgICAgICB9XG5cdFx0XHQgICAgfVxuXG5cdFx0XHQgICAgZnVuY3Rpb24gZHJhd0NpcmNsZShwLCByLCBjb2xvcikge1xuXHRcdFx0ICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG5cdFx0XHQgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdCAgICAgICAgY3R4LmFyYyhwLngsIHAueSwgciwgMCwgMiAqIE1hdGguUEksIHRydWUpO1xuXHRcdFx0ICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHQgICAgICAgIGN0eC5maWxsKCk7XG5cdFx0XHQgICAgfVxuXG5cdFx0XHQgICAgZnVuY3Rpb24gZHJhd0xpbmUocDEsIHAyKSB7XG5cdFx0XHQgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdCAgICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcblx0XHRcdCAgICAgICAgY3R4LmxpbmVUbyhwMi54LCBwMi55KTtcblx0XHRcdCAgICAgICAgY3R4LnN0cm9rZSgpO1xuXHRcdFx0ICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHQgICAgfVxuXG5cdFx0XHQgICAgZnVuY3Rpb24gcmVkcmF3KCkge1xuXHRcdFx0ICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cblx0XHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyOyBpKyspIHtcblx0XHRcdCAgICAgICAgICAgIHZhciBwb2ludHMgPSBzZWxmLmxpbmVzW2ldLnBvaW50cztcblxuXHRcdFx0ICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0ICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XG5cdFx0XHQgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzZWxmLmxpbmVzW2ldLmNvbG9yO1xuXHRcdFx0ICAgICAgICAgICAgY3R4Lm1vdmVUbyhwb2ludHNbMTVdLngsIHBvaW50c1sxNV0ueSk7XG5cblx0XHRcdCAgICAgICAgICAgIGZvciAodmFyIGogPSAxNTsgaiA8IHBvaW50cy5sZW5ndGggLSAyOyBqKyspIHtcblx0XHRcdCAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSBwb2ludHNbal07XG5cblx0XHRcdCAgICAgICAgICAgICAgICB2YXIgeGMgPSAocG9pbnRzW2ogKyAxXS54ICsgcG9pbnQueCkgLyAyO1xuXHRcdFx0ICAgICAgICAgICAgICAgIHZhciB5YyA9IChwb2ludHNbaiArIDFdLnkgKyBwb2ludC55KSAvIDI7XG5cblxuXHRcdFx0ICAgICAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHBvaW50LngsIHBvaW50LnksIHhjLCB5Yyk7XG5cdFx0XHQgICAgICAgICAgICB9XG5cdFx0XHQgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG5cdFx0XHQgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG5cblxuXHRcdFx0ICAgICAgICAgICAgLy8gRG90c1xuXHRcdFx0ICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDEuMjtcblx0XHRcdCAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHNlbGYuZG90Q29sb3JzW2ldWzJdO1xuXHRcdFx0ICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzZWxmLmxpbmVzW2ldLmRvdHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdCAgICAgICAgICAgICAgICB2YXIgZG90ID0gc2VsZi5saW5lc1tpXS5kb3RzW2pdLFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICBpZCA9IHNlbGYudGFyZ2V0c1tpXVtqXSxcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgZG90MiA9IFtcblx0XHRcdCAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLmxpbmVzW2ldLnBvaW50c1tpZF0ueCArIHNlbGYubGluZXNbaV0ucG9pbnRzW2lkICsgMV0ueCkgLyAyLFxuXHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGYubGluZXNbaV0ucG9pbnRzW2lkXS55ICsgc2VsZi5saW5lc1tpXS5wb2ludHNbaWQgKyAxXS55KSAvIDIsXG5cdFx0XHQgICAgICAgICAgICAgICAgICAgIF07XG5cblx0XHRcdCAgICAgICAgICAgICAgICB2YXIgcDEgPSB7IHg6IGRvdFswXSwgeTogZG90WzFdIH07XG5cdFx0XHQgICAgICAgICAgICAgICAgdmFyIHAyID0geyB4OiBkb3QyWzBdLCB5OiBkb3QyWzFdIH07XG5cblxuXHRcdFx0ICAgICAgICAgICAgICAgIGRyYXdMaW5lKHAxLCBwMik7XG5cdFx0XHQgICAgICAgICAgICAgICAgZHJhd0NpcmNsZShwMSwgMywgc2VsZi5kb3RDb2xvcnNbaV1bMF0pO1xuXG5cdFx0XHQgICAgICAgICAgICAgICAgZHJhd0NpcmNsZShwMiwgMTEsIHNlbGYuZG90Q29sb3JzW2ldWzFdKTtcblx0XHRcdCAgICAgICAgICAgICAgICBkcmF3Q2lyY2xlKHAyLCA1LjUsIHNlbGYuZG90Q29sb3JzW2ldWzBdKTtcblx0XHRcdCAgICAgICAgICAgIH1cblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgIH1cblxuXHRcdFx0ICAgIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG5cdFx0XHQgICAgICAgIHJhZmlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuXG5cdFx0XHQgICAgICAgIHNlbGYubGluZXNbMF0udXBkYXRlKCk7XG5cdFx0XHQgICAgICAgIHNlbGYubGluZXNbMV0udXBkYXRlKCk7XG5cblx0XHRcdCAgICAgICAgcmVkcmF3KCk7XG5cdFx0XHQgICAgfVxuXG5cdFx0XHQgICAgc2VsZi50b2dnbGUgPSBmdW5jdGlvbiAocnVuKSB7XG5cdFx0XHQgICAgICAgIGlmICghc2VsZi5pc09LKSByZXR1cm4gZmFsc2U7XG5cblx0XHRcdCAgICAgICAgaWYgKHJ1biA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0ICAgICAgICAgICAgc2VsZi50b2dnbGUoIXBhdXNlZCk7XG5cblx0XHRcdCAgICAgICAgZWxzZSBpZiAoISFydW4gJiYgcGF1c2VkKSB7XG5cdFx0XHQgICAgICAgICAgICBwYXVzZWQgPSBmYWxzZTtcblx0XHRcdCAgICAgICAgICAgIGFuaW1hdGUoKTtcblx0XHRcdCAgICAgICAgfVxuXHRcdFx0ICAgICAgICBlbHNlIGlmICghISFydW4pIHtcblx0XHRcdCAgICAgICAgICAgIHBhdXNlZCA9IHRydWU7XG5cdFx0XHQgICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWZpZCk7XG5cdFx0XHQgICAgICAgIH1cblx0XHRcdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdFx0XHQgICAgfVxuXG5cblx0XHRcdCAgICBzZWxmLmlzT0sgPSBpbml0KCk7XG5cdFx0XHR9XG5cdFx0XHRuZXcgVGltZWxpbmUoJCgnI2N2czMnKS5nZXQoMCkpLnRvZ2dsZSh0cnVlKTtcblx0XHR9XG5cdH1cbn0pXG5cbiIsInBvcnRmb2xpby5mYWN0b3J5KCdwcm9qZWN0cycsIGZ1bmN0aW9uICgkaHR0cCkge1xuXHR2YXIgZmFjdG9yeU9iaiA9IHt9O1xuXHRmYWN0b3J5T2JqLmdldFJlcG9zID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vdXNlci9yZXBvcycsIHtcblx0XHRcdHVzZXJuYW1lOiAnbW9zYW5lJyxcblx0XHRcdHBhc3N3b3JkOiAneHh4eHh4eHh4J1xuXHRcdH0pXG5cdFx0LnRoZW4oYXJyID0+IGFyci5kYXRhKVxuXHR9XG5cdHJldHVybiBmYWN0b3J5T2JqO1xufSlcdCIsIid1c2Ugc3RyaWN0JztcblxucG9ydGZvbGlvLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcblx0JHN0YXRlUHJvdmlkZXIuc3RhdGUoJ3Byb2plY3RzJywge1xuXHRcdHVybDonL3Byb2plY3RzJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9wb3J0Zm9saW8uaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ3Byb2pDVFJMJ1xuXHRcdH1cblx0KVxufSkiXX0=
